-- Crear tabla con pk
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR
);

-- Especifica que si no hay id la insertar√° solo, de manera secuencial
CREATE TABLE users2 (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR
);

-- Siempre sera por defecto le id
CREATE TABLE users3 (
    user_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    username VARCHAR
);

-- Se define una secuencia para la primary key, en este caso empieza desde 100 y de 2 en 2
CREATE TABLE users4 (
    user_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY(START WITH 100 INCREMENT BY 2),
    username VARCHAR
);

-- Llave compuesta, es la convinacion, por ejemplo no puedo tener id1=1 y id2=2 repetido
CREATE TABLE usersDual(
    id1 INT,
    id2 INT,
    PRIMARY KEY (id1, id2)
);

-- Crea una extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Borra una extension
DROP EXTENSION "uuid-ossp"

-- Imprime uuid randoms con la version
SELECT gen_random_uuid(), uuid_generate_v4();

-- Crea una tabla con pk de uuid v4
CREATE TABLE users5 (
    user_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    username VARCHAR
);

-- Crear una secuencia
CREATE SEQUENCE user_sequence;

-- Borrar una secuencia
DROP SEQUENCE user_sequence;

-- Llama la secuencia y ocupa el contador
SELECT nextval('user_sequence');

-- Pregunta cual es el valor actual de la secuencia
SELECT currval('user_sequence');

-- Crea una tabla ocupando la secuencia
CREATE TABLE users6 (
    user_id INTEGER PRIMARY KEY DEFAULT nextval('user_sequence'),
    username VARCHAR
);